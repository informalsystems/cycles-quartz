{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "string",
      "enum": [
        "init_clearing"
      ]
    },
    {
      "type": "object",
      "required": [
        "quartz"
      ],
      "properties": {
        "quartz": {
          "$ref": "#/definitions/RawExecute_for_RawEpidAttestation"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "$ref": "#/definitions/Cw20Transfer"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "submit_obligation"
      ],
      "properties": {
        "submit_obligation": {
          "$ref": "#/definitions/SubmitObligationMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "submit_obligations"
      ],
      "properties": {
        "submit_obligations": {
          "$ref": "#/definitions/SubmitObligationsMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "submit_setoffs"
      ],
      "properties": {
        "submit_setoffs": {
          "$ref": "#/definitions/SubmitSetoffsMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_tender"
      ],
      "properties": {
        "create_tender": {
          "$ref": "#/definitions/CreateTenderMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_acceptance"
      ],
      "properties": {
        "create_acceptance": {
          "$ref": "#/definitions/CreateAcceptanceMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_from"
      ],
      "properties": {
        "transfer_from": {
          "$ref": "#/definitions/Cw20TransferFrom"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CreateAcceptanceMsg": {
      "type": "object",
      "required": [
        "amount",
        "debtor"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "debtor": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CreateTenderMsg": {
      "type": "object",
      "required": [
        "amount",
        "debtor"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "debtor": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Cw20Transfer": {
      "type": "object",
      "required": [
        "amount",
        "recipient"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "recipient": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Cw20TransferFrom": {
      "type": "object",
      "required": [
        "amount",
        "owner",
        "recipient"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "owner": {
          "type": "string"
        },
        "recipient": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "HexBinary": {
      "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "IASReport": {
      "type": "object",
      "required": [
        "report",
        "reportsig"
      ],
      "properties": {
        "report": {
          "$ref": "#/definitions/ReportBody"
        },
        "reportsig": {
          "$ref": "#/definitions/Binary"
        }
      },
      "additionalProperties": false
    },
    "RawAttested_for_RawSessionCreate_and_RawEpidAttestation": {
      "type": "object",
      "required": [
        "attestation",
        "msg"
      ],
      "properties": {
        "attestation": {
          "$ref": "#/definitions/RawEpidAttestation"
        },
        "msg": {
          "$ref": "#/definitions/RawSessionCreate"
        }
      },
      "additionalProperties": false
    },
    "RawAttested_for_RawSessionSetPubKey_and_RawEpidAttestation": {
      "type": "object",
      "required": [
        "attestation",
        "msg"
      ],
      "properties": {
        "attestation": {
          "$ref": "#/definitions/RawEpidAttestation"
        },
        "msg": {
          "$ref": "#/definitions/RawSessionSetPubKey"
        }
      },
      "additionalProperties": false
    },
    "RawEpidAttestation": {
      "type": "object",
      "required": [
        "report"
      ],
      "properties": {
        "report": {
          "$ref": "#/definitions/IASReport"
        }
      },
      "additionalProperties": false
    },
    "RawExecute_for_RawEpidAttestation": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "session_create"
          ],
          "properties": {
            "session_create": {
              "$ref": "#/definitions/RawAttested_for_RawSessionCreate_and_RawEpidAttestation"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "session_set_pub_key"
          ],
          "properties": {
            "session_set_pub_key": {
              "$ref": "#/definitions/RawAttested_for_RawSessionSetPubKey_and_RawEpidAttestation"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RawSessionCreate": {
      "type": "object",
      "required": [
        "nonce"
      ],
      "properties": {
        "nonce": {
          "$ref": "#/definitions/HexBinary"
        }
      },
      "additionalProperties": false
    },
    "RawSessionSetPubKey": {
      "type": "object",
      "required": [
        "nonce",
        "pub_key"
      ],
      "properties": {
        "nonce": {
          "$ref": "#/definitions/HexBinary"
        },
        "pub_key": {
          "$ref": "#/definitions/HexBinary"
        }
      },
      "additionalProperties": false
    },
    "ReportBody": {
      "type": "object",
      "required": [
        "advisoryIDs",
        "advisoryURL",
        "epidPseudonym",
        "id",
        "isvEnclaveQuoteBody",
        "isvEnclaveQuoteStatus",
        "platformInfoBlob",
        "timestamp",
        "version"
      ],
      "properties": {
        "advisoryIDs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "advisoryURL": {
          "type": "string"
        },
        "epidPseudonym": {
          "$ref": "#/definitions/Binary"
        },
        "id": {
          "type": "string"
        },
        "isvEnclaveQuoteBody": {
          "$ref": "#/definitions/Binary"
        },
        "isvEnclaveQuoteStatus": {
          "type": "string"
        },
        "platformInfoBlob": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "SettleOff": {
      "anyOf": [
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        {
          "$ref": "#/definitions/Transfer"
        }
      ]
    },
    "SubmitObligationMsg": {
      "type": "object",
      "required": [
        "ciphertext",
        "digest"
      ],
      "properties": {
        "ciphertext": {
          "$ref": "#/definitions/HexBinary"
        },
        "digest": {
          "$ref": "#/definitions/HexBinary"
        }
      },
      "additionalProperties": false
    },
    "SubmitObligationsMsg": {
      "type": "object",
      "required": [
        "liquidity_sources",
        "obligations"
      ],
      "properties": {
        "liquidity_sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        "obligations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubmitObligationMsg"
          }
        }
      },
      "additionalProperties": false
    },
    "SubmitSetoffsMsg": {
      "type": "object",
      "required": [
        "setoffs_enc"
      ],
      "properties": {
        "setoffs_enc": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SettleOff"
          }
        }
      },
      "additionalProperties": false
    },
    "Transfer": {
      "type": "object",
      "required": [
        "amount",
        "payee",
        "payer"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "payee": {
          "type": "string"
        },
        "payer": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
