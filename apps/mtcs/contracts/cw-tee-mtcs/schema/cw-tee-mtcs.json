{
  "contract_name": "cw-tee-mtcs",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "allOf": [
      {
        "$ref": "#/definitions/RawInstantiate_for_RawEpidAttestation"
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Duration": {
        "type": "object",
        "required": [
          "nanos",
          "secs"
        ],
        "properties": {
          "nanos": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "secs": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "HexBinary": {
        "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "IASReport": {
        "type": "object",
        "required": [
          "report",
          "reportsig"
        ],
        "properties": {
          "report": {
            "$ref": "#/definitions/ReportBody"
          },
          "reportsig": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "RawAttested_for_RawCoreInstantiate_and_RawEpidAttestation": {
        "type": "object",
        "required": [
          "attestation",
          "msg"
        ],
        "properties": {
          "attestation": {
            "$ref": "#/definitions/RawEpidAttestation"
          },
          "msg": {
            "$ref": "#/definitions/RawCoreInstantiate"
          }
        },
        "additionalProperties": false
      },
      "RawConfig": {
        "type": "object",
        "required": [
          "epoch_duration",
          "light_client_opts",
          "mr_enclave"
        ],
        "properties": {
          "epoch_duration": {
            "$ref": "#/definitions/Duration"
          },
          "light_client_opts": {
            "$ref": "#/definitions/RawLightClientOpts"
          },
          "mr_enclave": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        "additionalProperties": false
      },
      "RawCoreInstantiate": {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "$ref": "#/definitions/RawConfig"
          }
        },
        "additionalProperties": false
      },
      "RawEpidAttestation": {
        "type": "object",
        "required": [
          "report"
        ],
        "properties": {
          "report": {
            "$ref": "#/definitions/IASReport"
          }
        },
        "additionalProperties": false
      },
      "RawInstantiate_for_RawEpidAttestation": {
        "$ref": "#/definitions/RawAttested_for_RawCoreInstantiate_and_RawEpidAttestation"
      },
      "RawLightClientOpts": {
        "type": "object",
        "required": [
          "chain_id",
          "max_block_lag",
          "max_clock_drift",
          "trust_threshold",
          "trusted_hash",
          "trusted_height",
          "trusting_period"
        ],
        "properties": {
          "chain_id": {
            "type": "string"
          },
          "max_block_lag": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "max_clock_drift": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "trust_threshold": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          },
          "trusted_hash": {
            "$ref": "#/definitions/HexBinary"
          },
          "trusted_height": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "trusting_period": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "ReportBody": {
        "type": "object",
        "required": [
          "advisoryIDs",
          "advisoryURL",
          "epidPseudonym",
          "id",
          "isvEnclaveQuoteBody",
          "isvEnclaveQuoteStatus",
          "platformInfoBlob",
          "timestamp",
          "version"
        ],
        "properties": {
          "advisoryIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "advisoryURL": {
            "type": "string"
          },
          "epidPseudonym": {
            "$ref": "#/definitions/Binary"
          },
          "id": {
            "type": "string"
          },
          "isvEnclaveQuoteBody": {
            "$ref": "#/definitions/Binary"
          },
          "isvEnclaveQuoteStatus": {
            "type": "string"
          },
          "platformInfoBlob": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "init_clearing"
        ]
      },
      {
        "type": "object",
        "required": [
          "quartz"
        ],
        "properties": {
          "quartz": {
            "$ref": "#/definitions/RawExecute_for_RawEpidAttestation"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer"
        ],
        "properties": {
          "transfer": {
            "$ref": "#/definitions/Cw20Transfer"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "submit_obligation"
        ],
        "properties": {
          "submit_obligation": {
            "$ref": "#/definitions/SubmitObligationMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "submit_obligations"
        ],
        "properties": {
          "submit_obligations": {
            "$ref": "#/definitions/SubmitObligationsMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "submit_setoffs"
        ],
        "properties": {
          "submit_setoffs": {
            "$ref": "#/definitions/SubmitSetoffsMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_tender"
        ],
        "properties": {
          "create_tender": {
            "$ref": "#/definitions/CreateTenderMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "create_acceptance"
        ],
        "properties": {
          "create_acceptance": {
            "$ref": "#/definitions/CreateAcceptanceMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer_from"
        ],
        "properties": {
          "transfer_from": {
            "$ref": "#/definitions/Cw20TransferFrom"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CreateAcceptanceMsg": {
        "type": "object",
        "required": [
          "amount",
          "debtor"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "debtor": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateTenderMsg": {
        "type": "object",
        "required": [
          "amount",
          "debtor"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "debtor": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Cw20Transfer": {
        "type": "object",
        "required": [
          "amount",
          "recipient"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "recipient": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Cw20TransferFrom": {
        "type": "object",
        "required": [
          "amount",
          "owner",
          "recipient"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "owner": {
            "type": "string"
          },
          "recipient": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "HexBinary": {
        "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "IASReport": {
        "type": "object",
        "required": [
          "report",
          "reportsig"
        ],
        "properties": {
          "report": {
            "$ref": "#/definitions/ReportBody"
          },
          "reportsig": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "RawAttested_for_RawSessionCreate_and_RawEpidAttestation": {
        "type": "object",
        "required": [
          "attestation",
          "msg"
        ],
        "properties": {
          "attestation": {
            "$ref": "#/definitions/RawEpidAttestation"
          },
          "msg": {
            "$ref": "#/definitions/RawSessionCreate"
          }
        },
        "additionalProperties": false
      },
      "RawAttested_for_RawSessionSetPubKey_and_RawEpidAttestation": {
        "type": "object",
        "required": [
          "attestation",
          "msg"
        ],
        "properties": {
          "attestation": {
            "$ref": "#/definitions/RawEpidAttestation"
          },
          "msg": {
            "$ref": "#/definitions/RawSessionSetPubKey"
          }
        },
        "additionalProperties": false
      },
      "RawEpidAttestation": {
        "type": "object",
        "required": [
          "report"
        ],
        "properties": {
          "report": {
            "$ref": "#/definitions/IASReport"
          }
        },
        "additionalProperties": false
      },
      "RawExecute_for_RawEpidAttestation": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "session_create"
            ],
            "properties": {
              "session_create": {
                "$ref": "#/definitions/RawAttested_for_RawSessionCreate_and_RawEpidAttestation"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "session_set_pub_key"
            ],
            "properties": {
              "session_set_pub_key": {
                "$ref": "#/definitions/RawAttested_for_RawSessionSetPubKey_and_RawEpidAttestation"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RawSessionCreate": {
        "type": "object",
        "required": [
          "nonce"
        ],
        "properties": {
          "nonce": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        "additionalProperties": false
      },
      "RawSessionSetPubKey": {
        "type": "object",
        "required": [
          "nonce",
          "pub_key"
        ],
        "properties": {
          "nonce": {
            "$ref": "#/definitions/HexBinary"
          },
          "pub_key": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        "additionalProperties": false
      },
      "ReportBody": {
        "type": "object",
        "required": [
          "advisoryIDs",
          "advisoryURL",
          "epidPseudonym",
          "id",
          "isvEnclaveQuoteBody",
          "isvEnclaveQuoteStatus",
          "platformInfoBlob",
          "timestamp",
          "version"
        ],
        "properties": {
          "advisoryIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "advisoryURL": {
            "type": "string"
          },
          "epidPseudonym": {
            "$ref": "#/definitions/Binary"
          },
          "id": {
            "type": "string"
          },
          "isvEnclaveQuoteBody": {
            "$ref": "#/definitions/Binary"
          },
          "isvEnclaveQuoteStatus": {
            "type": "string"
          },
          "platformInfoBlob": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "SettleOff": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/definitions/HexBinary"
            }
          },
          {
            "$ref": "#/definitions/Transfer"
          }
        ]
      },
      "SubmitObligationMsg": {
        "type": "object",
        "required": [
          "ciphertext",
          "digest"
        ],
        "properties": {
          "ciphertext": {
            "$ref": "#/definitions/HexBinary"
          },
          "digest": {
            "$ref": "#/definitions/HexBinary"
          }
        },
        "additionalProperties": false
      },
      "SubmitObligationsMsg": {
        "type": "object",
        "required": [
          "liquidity_sources",
          "obligations"
        ],
        "properties": {
          "liquidity_sources": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/HexBinary"
            }
          },
          "obligations": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SubmitObligationMsg"
            }
          }
        },
        "additionalProperties": false
      },
      "SubmitSetoffsMsg": {
        "type": "object",
        "required": [
          "setoffs_enc"
        ],
        "properties": {
          "setoffs_enc": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/SettleOff"
            }
          }
        },
        "additionalProperties": false
      },
      "Transfer": {
        "type": "object",
        "required": [
          "amount",
          "payee",
          "payer"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "payee": {
            "type": "string"
          },
          "payer": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "string",
        "enum": [
          "get_all_setoffs"
        ]
      },
      {
        "type": "object",
        "required": [
          "get_liquidity_sources"
        ],
        "properties": {
          "get_liquidity_sources": {
            "type": "object",
            "properties": {
              "epoch": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "allowances_by_contract"
        ],
        "properties": {
          "allowances_by_contract": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "allowances_by_user"
        ],
        "properties": {
          "allowances_by_user": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_allowances"
        ],
        "properties": {
          "all_allowances": {
            "type": "object",
            "required": [
              "owner",
              "spender"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "owner": {
                "type": "string"
              },
              "spender": {
                "type": "string"
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_allowances": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllAllowancesResponse",
      "type": "object",
      "required": [
        "allowances"
      ],
      "properties": {
        "allowances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AllowanceInfo"
          }
        }
      },
      "definitions": {
        "AllowanceInfo": {
          "type": "object",
          "required": [
            "allowance",
            "expires",
            "spender"
          ],
          "properties": {
            "allowance": {
              "$ref": "#/definitions/Uint128"
            },
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "spender": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "allowances_by_contract": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllSpenderAllowancesResponse",
      "type": "object",
      "required": [
        "allowances"
      ],
      "properties": {
        "allowances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpenderAllowanceInfo"
          }
        }
      },
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "SpenderAllowanceInfo": {
          "type": "object",
          "required": [
            "allowance",
            "expires",
            "owner"
          ],
          "properties": {
            "allowance": {
              "$ref": "#/definitions/Uint128"
            },
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "owner": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "allowances_by_user": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllOwnerAllowancesResponse",
      "type": "object",
      "required": [
        "allowances"
      ],
      "properties": {
        "allowances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OwnerAllowanceInfo"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "OwnerAllowanceInfo": {
          "type": "object",
          "required": [
            "allowance",
            "expires",
            "owner"
          ],
          "properties": {
            "allowance": {
              "$ref": "#/definitions/Uint128"
            },
            "expires": {
              "$ref": "#/definitions/Expiration"
            },
            "owner": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BalanceResponse",
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_all_setoffs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetAllSetoffsResponse",
      "type": "object",
      "required": [
        "setoffs"
      ],
      "properties": {
        "setoffs": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/HexBinary"
              },
              {
                "$ref": "#/definitions/SettleOff"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "HexBinary": {
          "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "SettleOff": {
          "anyOf": [
            {
              "type": "array",
              "items": {
                "$ref": "#/definitions/HexBinary"
              }
            },
            {
              "$ref": "#/definitions/Transfer"
            }
          ]
        },
        "Transfer": {
          "type": "object",
          "required": [
            "amount",
            "payee",
            "payer"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "payee": {
              "type": "string"
            },
            "payer": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "get_liquidity_sources": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetLiquiditySourcesResponse",
      "type": "object",
      "required": [
        "liquidity_sources"
      ],
      "properties": {
        "liquidity_sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HexBinary"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "HexBinary": {
          "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        }
      }
    }
  }
}
