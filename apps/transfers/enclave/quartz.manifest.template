# Quartz-based app manifest file

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ quartz_dir }}/target/release/quartz-app-transfers-enclave"

loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:/usr/local/lib:{{ arch_libdir }}:/usr{{ arch_libdir }}"
loader.env.HOME = "{{ home }}"
loader.env.INSIDE_SGX = "1"
loader.env.TLS = { passthrough = true }
loader.env.RA_TYPE = { passthrough = true }
loader.env.RA_TLS_ALLOW_DEBUG_ENCLAVE_INSECURE = { passthrough = true }
loader.env.RA_TLS_ALLOW_OUTDATED_TCB_INSECURE = { passthrough = true }
loader.env.RA_TLS_MRENCLAVE = { passthrough = true }
loader.env.RA_TLS_MRSIGNER = { passthrough = true }
loader.env.RA_TLS_ISV_SVN = { passthrough = true }
loader.env.RA_TLS_ISV_PROD_ID = { passthrough = true }
loader.env.RA_TLS_EPID_API_KEY = { passthrough = true }
loader.env.MYAPP_DATA = { passthrough = true }
loader.env.QUARTZ_PORT = { passthrough = true }
loader.env.SSL_CERT_FILE = { passthrough = true }
loader.env.NEUTROND_WASM_DIR = "/tmp/neutrond_wasm"

loader.argv = ["quartz-app-transfers-enclave",
                "--chain-id", "{{ chain_id }}",
                "--fmspc", "{{ fmspc }}",
                "--tcbinfo-contract", "{{ tcbinfo_contract }}",
                "--dcap-verifier-contract", "{{ dcap_verifier_contract }}",
                "--node-url", "{{ node_url }}",
                "--rpc-addr", "0.0.0.0:11090",
                "--trusted-height", "{{ trusted_height }}",
                "--trusted-hash", "{{ trusted_hash }}"]

fs.mounts = [
  { uri = "file:{{ gramine.runtimedir() }}", path = "/lib" },
  { uri = "file:{{ arch_libdir }}", path = "{{ arch_libdir }}" },
  { uri = "file:/usr/{{ arch_libdir }}", path = "/usr{{ arch_libdir }}" },
  { uri = "file:{{ quartz_dir }}", path = "{{ quartz_dir }}" },
  { uri = "file:/home/peppi/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/!cosm!wasm/wasmvm/v2@v2.1.3/internal/api/libwasmvm.x86_64.so", path = "/usr/local/lib/libwasmvm.x86_64.so" },
  { uri = "file:/home/peppi/.gvm/pkgsets/go1.22/global/bin/neutrond", path = "/home/peppi/.gvm/pkgsets/go1.22/global/bin/neutrond"},
  { uri = "file:/etc/ssl/certs/ca-certificates.crt", path = "/etc/ssl/certs/ca-certificates.crt" },
  { uri = "file:/tmp/neutrond_wasm", path = "/tmp/neutrond_wasm" },
  { uri = "file:/home/peppi/.neutrond" , path = "/home/peppi/.neutrond"},
]

# sgx.debug = true
sgx.enclave_size = "4G"
sgx.max_threads = 16
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}

sgx.remote_attestation = "{{ ra_type }}"
sgx.ra_client_spid = "{{ ra_client_spid }}"
sgx.ra_client_linkable = {{ 'true' if ra_client_linkable == '1' else 'false' }}

sgx.trusted_files = [
  "file:/home/peppi/.gvm/pkgsets/go1.22/global/pkg/mod/github.com/!cosm!wasm/wasmvm/v2@v2.1.3/internal/api/libwasmvm.x86_64.so",
  "file:/home/peppi/.neutrond/",
  "file:{{ gramine.libos }}",
  "file:{{ quartz_dir }}/target/release/",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  "file:/etc/ssl/certs/ca-certificates.crt",
  "file:/home/peppi/.gvm/pkgsets/go1.22/global/bin/neutrond",
]


sgx.allowed_files = [
  "file:{{ quartz_dir }}/exchange.sk",
  "file:{{ quartz_dir }}/request.json",
  "file:/etc/nsswitch.conf",
  "file:/etc/host.conf",
  "file:/etc/ethers",
  "file:/etc/hosts",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/gai.conf",
  "file:/etc/ssl/certs/ca-certificates.crt",
  "file:/etc/sgx_default_qcnl.conf",
  "file:/home/peppi/.gvm/pkgsets/go1.22/global/bin/neutrond",
  "file:/tmp/neutrond_wasm/",
  "file:/home/peppi/.neutrond/",
]

sys.enable_extra_runtime_domain_names_conf = true
loader.insecure__use_host_env = true
sys.insecure__allow_eventfd = true
sys.enable_sigterm_injection = true