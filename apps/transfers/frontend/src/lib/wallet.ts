import { AccountData, Keplr, Window } from '@keplr-wallet/types'
import { OfflineSigner } from '@cosmjs/proto-signing'
import { Secp256k1Keypair } from '@cosmjs/crypto'
import { decrypt as _decrypt } from 'eciesjs'
import { isEmpty } from 'lodash'
import invariant from 'tiny-invariant'

import { chain } from './chainConfig'
import { getEphemeralKeypair } from './getEphemeralKeypair'

// Wallet variables declaration. They will be set upon initialization
let keplr: Keplr | undefined
let signer: OfflineSigner
let account: AccountData
let keypair: Secp256k1Keypair

// Setup the Keprl Wallet wrapper
const init = async () => {
  keplr = (window as Window).keplr

  invariant(
    process.env.NEXT_PUBLIC_CHAIN_ID,
    'NEXT_PUBLIC_CHAIN_ID must be defined',
  )
  invariant(keplr, 'No Keplr wallet found')

  // Generate user ephemeral key pair for decryption
  keypair = await getEphemeralKeypair()
  // Set chain info in Keplr
  await keplr.experimentalSuggestChain(chain)
  // Init chain in Keplr
  await keplr.enable(process.env.NEXT_PUBLIC_CHAIN_ID)
  await refreshUser()
}
// Decrypt data using the ephemeral private key
const decrypt = (data: string): string => {
  let result = ''

  if (!isEmpty(data)) {
    result = _decrypt(
      wallet.getKeypair().privkey,
      Buffer.from(data, 'hex'),
    ).toString()
  }

  return result
}
// Get the current Keprl Wallet account
const getAccount = (): AccountData => account
// Get the autogenerated ephemeral keypair
const getKeypair = (): Secp256k1Keypair => keypair
// Get the current Keprl Wallet signer
const getSigner = (): OfflineSigner => signer
// Update new Keprl Wallet user info
const refreshUser = async (): Promise<void> => {
  signer = keplr!.getOfflineSigner(process.env.NEXT_PUBLIC_CHAIN_ID!)
  account = (await signer.getAccounts())[0]
}

// Define the Keprl Wallet wrapper interface to be used
export const wallet = {
  decrypt,
  init,
  getAccount,
  getKeypair,
  getSigner,
  refreshUser,
}
