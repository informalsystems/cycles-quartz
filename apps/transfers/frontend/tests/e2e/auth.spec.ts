import { type Page } from '@playwright/test'

import { routes } from '@/config/routes'
import test from './fixtures'

const { dashboard, landing, seed } = routes
let page: Page

test.describe.configure({ mode: 'serial' })
test.beforeAll(async ({ context }) => {
  page = await context.newPage()
})
test.afterAll(async () => {
  await page.close()
})

test.describe('Auth', () => {
  test.describe('No wallet', () => {
    test('cannot go to seed page without a wallet', async () => {
      await page.goto(seed)
      await test
        .expect(page.getByRole('button', { name: /connect/i }))
        .toBeVisible()
    })

    test('cannot enter the app without a wallet', async () => {
      await page.goto(dashboard)
      await test
        .expect(page.getByRole('button', { name: /connect/i }))
        .toBeVisible()
    })
  })

  test.describe('No seed phrase', () => {
    test.beforeAll(async ({ context }) => {
      // Connect to Keplr wallet
      await page.goto(landing)
      await page.getByRole('button', { name: /connect/i }).click()

      // Accept app suggested testnet info
      const addChainPage = await context.waitForEvent('page')

      await addChainPage.getByRole('button', { name: /approve/i }).click()
      await addChainPage.waitForEvent('close')
    })

    test('cannot go back to landing page', async () => {
      await page.goto(landing)
      await test.expect(page.getByText(/recovery seed phrase/i)).toBeVisible()
    })

    test('cannot enter the app without a seed phrase', async () => {
      await page.goto(dashboard)
      await test.expect(page.getByText(/recovery seed phrase/i)).toBeVisible()
    })
  })

  test.describe('In app', () => {
    test.beforeAll(async () => {
      // Accept autogenerated seed phrase
      await page.goto(seed)
      await page.getByRole('button', { name: /continue with/i }).click()
      await test.expect(page.getByText(/balance:/i)).toBeVisible()
    })

    test('cannot go back to landing page', async () => {
      await page.goto(landing)
      await test.expect(page.getByText(/balance:/i)).toBeVisible()
    })

    test('cannot go back to seed page', async () => {
      await page.goto(seed)
      await test.expect(page.getByText(/balance:/i)).toBeVisible()
    })
  })
})
